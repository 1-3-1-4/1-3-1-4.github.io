<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寥寥几笔</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-29T08:48:39.082Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YiZheng-Wei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python--数据类型总览</title>
    <link href="http://example.com/2021/04/29/python/01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%80%BB%E8%A7%88/"/>
    <id>http://example.com/2021/04/29/python/01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%80%BB%E8%A7%88/</id>
    <published>2021-04-29T02:51:22.000Z</published>
    <updated>2021-04-29T08:48:39.082Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整型-int"><a href="#整型-int" class="headerlink" title="整型(int)"></a>整型(int)</h3><pre class=" language-python"><code class="language-python">intEx <span class="token operator">=</span> <span class="token number">1024</span></code></pre><h3 id="浮点型-float"><a href="#浮点型-float" class="headerlink" title="浮点型(float)"></a>浮点型(float)</h3><p><code>floatEx = 2.345</code></p><h3 id="字符型-string"><a href="#字符型-string" class="headerlink" title="字符型(string)"></a>字符型(string)</h3><h4 id="1、格式"><a href="#1、格式" class="headerlink" title="1、格式"></a>1、格式</h4><p>1、使用单引号标识字符串</p><p><code>stringEx = &#39;my code&#39;</code></p><p>2、使用双引号标识字符串</p><p><code>stringEx = &quot;my code&quot;</code></p><blockquote><p>在双引号中可以使用单引号<code>stringEx = &quot;&#39;my&#39;,&#39;code&#39;&quot;</code></p></blockquote><p>3、使用三单引号或三双引号来表示多行的字符串，可以在三引号中使用单引号和双引号</p><span id="more"></span><pre class=" language-python"><code class="language-python">stringEx <span class="token operator">=</span> <span class="token triple-quoted-string string">'''my codeoh, this is 'cat'yes, l like "it"'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>stringEx<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""my codeoh, this is 'cat'yes, l like "it""""</span></code></pre><blockquote><p>同时三单引号和三双引号在Python也表示多行注释</p></blockquote><h4 id="2、一些字符串的操作"><a href="#2、一些字符串的操作" class="headerlink" title="2、一些字符串的操作"></a>2、一些字符串的操作</h4><p>1、获取字符串<code>abcdefgh</code>中的<code>bc</code></p><pre class=" language-python"><code class="language-python">stringEx <span class="token operator">=</span> <span class="token string">'abcdefgh'</span><span class="token keyword">print</span><span class="token punctuation">(</span>stringEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bc</span></code></pre><p>2、循环输出字符串的每个字符</p><pre class=" language-python"><code class="language-python">stringEx <span class="token operator">=</span> <span class="token string">'abcdefgh'</span><span class="token keyword">for</span> s <span class="token keyword">in</span> stringEx<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><h3 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型(bool)"></a>布尔型(bool)</h3><p><code>boolEx = True</code></p><p><code>boolEx = False</code></p><h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h3><h4 id="1、格式-1"><a href="#1、格式-1" class="headerlink" title="1、格式"></a>1、格式</h4><p><code>变量名 = [值1, 值2, 值3]</code></p><h4 id="2、初始化"><a href="#2、初始化" class="headerlink" title="2、初始化"></a>2、初始化</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化一个空列表</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化一个都为整型的列表</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化连续的数字 [5, 6, 7, 8, 9]</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化n个相同值的列表 [1, 1, 1, 1, 1]</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#第一种</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">#第二种</span></code></pre><h4 id="3、列表的操作"><a href="#3、列表的操作" class="headerlink" title="3、列表的操作"></a>3、列表的操作</h4><p><code>listEx = [1, 2, 3]</code></p><h4 id="1、列表中增加值"><a href="#1、列表中增加值" class="headerlink" title="1、列表中增加值"></a>1、列表中增加值</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面</span>listEx<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'bob'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#追加在列表的最后面 [1, 2, 3, 'bob']</span>listEx<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#追加多个值 [1, 2, 3, 'joe', 'hode']</span>listEx<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'joe'</span><span class="token punctuation">,</span> <span class="token string">'hode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>一些意外的写法</p><p><code>listEx.append([&#39;bob&#39;, &#39;joe&#39;])</code>得到的是<code>[1, 2, 3, [&#39;bob&#39;, &#39;joe&#39;]]</code></p><p><code>listEx.extend(&#39;bob&#39;)</code>得到的是<code>[1, 2, 3, &#39;b&#39;, &#39;o&#39;, &#39;b&#39;]</code></p></blockquote><h4 id="2、列表中删除值"><a href="#2、列表中删除值" class="headerlink" title="2、列表中删除值"></a>2、列表中删除值</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#删除指定的值</span>listEx<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除的列表中第一个值为2的</span><span class="token comment" spellcheck="true">#删除从1到2位置的值</span><span class="token keyword">del</span> listEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h3><h4 id="1、格式-2"><a href="#1、格式-2" class="headerlink" title="1、格式"></a>1、格式</h4><p><code>变量 = (值1, 值2, 值3)</code></p><blockquote><p>元组与列表类似，不同之处在于元组的元素不能修改</p></blockquote><h4 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h4><pre class=" language-python"><code class="language-python">tupleEx <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span>  <span class="token punctuation">)</span>tinytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 输出完整元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 输出元组的第一个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输出从第二个元素开始到第三个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 输出从第三个元素开始的所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinytuple <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出两次元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx <span class="token operator">+</span> tinytuple<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接元组</span></code></pre><blockquote><p>string、list 和 tuple 都属于 sequence（序列）。</p><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul></blockquote><p><strong>特殊的使用</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>letter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>letter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span></code></pre><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h3><h4 id="1、格式-3"><a href="#1、格式-3" class="headerlink" title="1、格式"></a>1、格式</h4><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合</p><blockquote><p><strong>注意：</strong>创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p></blockquote><h4 id="2、使用-1"><a href="#2、使用-1" class="headerlink" title="2、使用"></a>2、使用</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在if中的使用</span>sites <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu', 'Taobao'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'&amp;#125;</span></code></pre><blockquote><p><strong>重复的元素会被自动过滤掉，而且输出的集合中的顺序是随机的</strong></p></blockquote><h4 id="3、集合的运算"><a href="#3、集合的运算" class="headerlink" title="3、集合的运算"></a>3、集合的运算</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># set可以进行集合运算</span>a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a 和 b 的差集  在a中有的且在b中没有的</span><span class="token comment" spellcheck="true"># &amp;#123;'d', 'b', 'r'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>b <span class="token operator">-</span> a<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># b 和 a 的差集  在b中有的且在a中没有的</span><span class="token comment" spellcheck="true"># &amp;#123;'l', 'm', 'z'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a 和 b 的并集</span><span class="token comment" spellcheck="true"># &amp;#123;'d', 'z', 'b', 'a', 'r', 'm', 'c', 'l'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># a 和 b 的交集</span><span class="token comment" spellcheck="true">#&amp;#123;'a', 'c'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># a 和 b 中不同时存在的元素</span><span class="token comment" spellcheck="true"># &amp;#123;'d', 'z', 'b', 'l', 'r', 'm'&amp;#125;</span></code></pre><h3 id="字典-dictionary"><a href="#字典-dictionary" class="headerlink" title="字典(dictionary)"></a>字典(dictionary)</h3><h4 id="1、格式-4"><a href="#1、格式-4" class="headerlink" title="1、格式"></a>1、格式</h4><p>列表是有序的对象集合，字典是无序的对象集合。</p><blockquote><p>列表和字典的区别：字典中的元素是通过键来存取，而不是通过偏移存取</p></blockquote><p>字典是一种映射类型，字典用<code>&#123;&#125;</code>标识，它是一个无序的<code>键(key): 值(value)</code>的集合</p><p>在同一个字典中，键(key)必须是惟一的</p><pre class=" language-python"><code class="language-python">dictEx <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span>ExdictEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token keyword">print</span><span class="token punctuation">(</span>dictEx<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'a': 1, 'b': 2, 1: 'abc'&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dictEx<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出所有的键</span><span class="token comment" spellcheck="true"># ['a', 'b', 1]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dictEx<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出所有的值</span><span class="token comment" spellcheck="true"># [1, 2, 'abc']</span></code></pre><h4 id="2、一些构建字典的写法"><a href="#2、一些构建字典的写法" class="headerlink" title="2、一些构建字典的写法"></a>2、一些构建字典的写法</h4><pre class=" language-python"><code class="language-python">listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'golang'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">(</span>listEx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'python': 1, 'php': 2, 'golang': 3&amp;#125;</span>dictEx <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;x: x**2 for x in (2, 4, 6)&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dictEx<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;2: 4, 4: 16, 6: 36&amp;#125;</span>dictEx <span class="token operator">=</span> dict<span class="token punctuation">(</span>python<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> php<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> golang<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dictEx<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'python': 1, 'php': 2, 'golang': 3&amp;#125;</span></code></pre><blockquote><p><code>x**2</code>中<code>**</code>表示幂，<code>2**3</code>表示2的3次方</p></blockquote>]]></content>
    
    
    <summary type="html">数据类型总览</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python--数据类型总览--列表详情</title>
    <link href="http://example.com/2021/04/29/python/02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8%E8%AF%A6%E7%BB%86/"/>
    <id>http://example.com/2021/04/29/python/02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8%E8%AF%A6%E7%BB%86/</id>
    <published>2021-04-29T02:51:22.000Z</published>
    <updated>2021-04-29T08:48:39.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、格式"><a href="#一、格式" class="headerlink" title="一、格式"></a>一、格式</h2><p><code>变量名 = [值1, 值2, 值3]</code></p><p><img data-src="https://www.runoob.com/wp-content/uploads/2014/05/positive-indexes-1.png" alt="列表"></p><h2 id="二、初始化"><a href="#二、初始化" class="headerlink" title="二、初始化"></a>二、初始化</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化一个空列表</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化一个都为整型的列表</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化连续的数字 [5, 6, 7, 8, 9]</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化n个相同值的列表 [1, 1, 1, 1, 1]</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#第一种</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">#第二种</span></code></pre><h2 id="三、列表的操作"><a href="#三、列表的操作" class="headerlink" title="三、列表的操作"></a>三、列表的操作</h2><p><code>listEx = [1, 2, 3]</code></p><h3 id="1、列表中增加值-修改值"><a href="#1、列表中增加值-修改值" class="headerlink" title="1、列表中增加值/修改值"></a>1、列表中增加值/修改值</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面</span>listEx<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'bob'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#追加在列表的最后面 [1, 2, 3, 'bob']</span>listEx<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#追加多个值 [1, 2, 3, 'joe', 'hode']</span>listEx<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'joe'</span><span class="token punctuation">,</span> <span class="token string">'hode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#修改索引2的值</span>listEx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2333'</span></code></pre><span id="more"></span><blockquote><p>一些意外的写法</p><p><code>listEx.append([&#39;bob&#39;, &#39;joe&#39;])</code>得到的是<code>[1, 2, 3, [&#39;bob&#39;, &#39;joe&#39;]]</code></p><p><code>listEx.extend(&#39;bob&#39;)</code>得到的是<code>[1, 2, 3, &#39;b&#39;, &#39;o&#39;, &#39;b&#39;]</code></p></blockquote><h3 id="2、列表中删除值"><a href="#2、列表中删除值" class="headerlink" title="2、列表中删除值"></a>2、列表中删除值</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#删除指定的值</span>listEx<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除的列表中第一个值为2的</span><span class="token comment" spellcheck="true">#删除从1到2位置的值</span><span class="token keyword">del</span> listEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><h3 id="3、列表截取与拼接"><a href="#3、列表截取与拼接" class="headerlink" title="3、列表截取与拼接"></a>3、列表截取与拼接</h3><p>截取值的写法<code>列表[索引1:索引3]</code>,  会截取索引1(包括1)到索引3(不包括)之间的值</p><pre class=" language-python"><code class="language-python">listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>listEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 正常索引值截取</span><span class="token comment" spellcheck="true"># [20, 30, 40, 50]</span><span class="token keyword">print</span><span class="token punctuation">(</span>listEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 负数索引值截取</span><span class="token comment" spellcheck="true"># [20, 30, 40, 50, 60]</span></code></pre><p><strong>列表截取可以传入第三个值</strong></p><pre class=" language-python"><code class="language-python">listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>listEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [2, 5]</span></code></pre><blockquote><p>解释：截取索引1到索引6的值为<code>2, 3, 4, 5, 6</code>，第三个参数是3，就是每间隔3个取一个就是<code>2, 5</code></p></blockquote><p>列表的拼接操作</p><pre class=" language-python"><code class="language-python">listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>listEx <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>listEx<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5, 6]</span></code></pre><h3 id="4、列表的排序"><a href="#4、列表的排序" class="headerlink" title="4、列表的排序"></a>4、列表的排序</h3><h4 id="1-sorted-临时排序"><a href="#1-sorted-临时排序" class="headerlink" title="1. sorted() 临时排序"></a>1. sorted() 临时排序</h4><pre class=" language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 [1, 2, 3, 4, 5, 6, 6, 9]</span></code></pre><h4 id="2-永久性排序"><a href="#2-永久性排序" class="headerlink" title="2.永久性排序"></a>2.永久性排序</h4><pre class=" language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 [1, 2, 3, 4, 5, 6, 6, 9]</span>num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 [9, 6, 6, 5, 4, 3, 2, 1]</span><span class="token comment" spellcheck="true"># 二维列表排序</span><span class="token keyword">def</span> <span class="token function">sortSecond</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>sortSecond<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[1, 2], [2, 3], [3, 4], [5, 9]]</span></code></pre><h4 id="3-永久性翻转列表顺序"><a href="#3-永久性翻转列表顺序" class="headerlink" title="3.永久性翻转列表顺序"></a>3.永久性翻转列表顺序</h4><pre class=" language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>num_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 [9, 6, 4, 2, 1, 5, 3, 6]</span></code></pre><h3 id="5、列表脚本操作符"><a href="#5、列表脚本操作符" class="headerlink" title="5、列表脚本操作符"></a>5、列表脚本操作符</h3><p>列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。</p><table><thead><tr><th>Python表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len([1,2,3])</td><td>3</td><td>长度</td></tr><tr><td>[1,2,3]+[4,5,6]</td><td>[1,2,3,4,5,6]</td><td>组合</td></tr><tr><td>[‘Hi!’] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td></tr><tr><td>3 in [1, 2, 3]</td><td>True</td><td>元素是否存在于列表中</td></tr><tr><td>for x in [1, 2, 3]: print(x, end=” “)</td><td>1 2 3</td><td>迭代</td></tr></tbody></table><h2 id="四、列表的函数-amp-方法"><a href="#四、列表的函数-amp-方法" class="headerlink" title="四、列表的函数&amp;方法"></a>四、列表的函数&amp;方法</h2><h3 id="1、函数-上面有些用到过"><a href="#1、函数-上面有些用到过" class="headerlink" title="1、函数[上面有些用到过]"></a>1、函数[上面有些用到过]</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len(list)</td><td>列表元素的个数</td></tr><tr><td>max(list)</td><td>返回列表元素最大值</td></tr><tr><td>min(list)</td><td>返回列表元素最小值</td></tr><tr><td>list(seq)</td><td>将元组转换为列表</td></tr></tbody></table><h3 id="2、列表方法"><a href="#2、列表方法" class="headerlink" title="2、列表方法"></a>2、列表方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>list.append(obj)</td><td>在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td>在列表末尾一次性追加另一个序列中的多个值</td></tr><tr><td>list.index(obj)</td><td>在列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td>将对象插入到index的后面</td></tr><tr><td>list.pop(index=-1)</td><td>移除列表中的一个元素（默认是最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td>移除列表中的某个值得第一个匹配项</td></tr><tr><td>list.reverse()</td><td>反向列表中的元素</td></tr><tr><td>list.sort(key=None, reverse=False)</td><td>对原列表进行排序</td></tr><tr><td>list.clear()</td><td>清空列表</td></tr><tr><td>list.copy()</td><td>复制列表</td></tr></tbody></table><h2 id="五、列表注意"><a href="#五、列表注意" class="headerlink" title="五、列表注意"></a>五、列表注意</h2><h4 id="1、列表赋值"><a href="#1、列表赋值" class="headerlink" title="1、列表赋值"></a>1、列表赋值</h4><pre class=" language-python"><code class="language-python">foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pizza'</span><span class="token punctuation">,</span> <span class="token string">'falafel'</span><span class="token punctuation">]</span>my_foods <span class="token operator">=</span> foodsfoods<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'ice cream'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_foods<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 ['pizza', 'falafel', 'ice cream']</span>foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pizza'</span><span class="token punctuation">,</span> <span class="token string">'falafel'</span><span class="token punctuation">]</span>my_foods <span class="token operator">=</span> foods<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>foods<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'ice cream'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_foods<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 ['pizza', 'falafel']</span></code></pre><h4 id="2、列表在作为函数参数入参时注意的"><a href="#2、列表在作为函数参数入参时注意的" class="headerlink" title="2、列表在作为函数参数入参时注意的"></a>2、列表在作为函数参数入参时注意的</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>param_list<span class="token punctuation">)</span><span class="token punctuation">:</span>  param_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  param_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1、对列表操作会改变之前列表</span>param_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>test<span class="token punctuation">(</span>param_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>param_1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 [1,2]</span><span class="token comment" spellcheck="true"># 2、对列表操作不会改变之前的列表</span>param_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>test<span class="token punctuation">(</span>param_2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>param_2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 []</span></code></pre>]]></content>
    
    
    <summary type="html">数据类型总览--列表详情</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python--数据类型总览--字典详情</title>
    <link href="http://example.com/2021/04/29/python/03-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8%E8%AF%A6%E7%BB%86/"/>
    <id>http://example.com/2021/04/29/python/03-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8%E8%AF%A6%E7%BB%86/</id>
    <published>2021-04-29T02:51:22.000Z</published>
    <updated>2021-04-29T08:48:39.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、格式"><a href="#一、格式" class="headerlink" title="一、格式"></a>一、格式</h2><p><code>变量 = &#123;key1: value1, key2: value2, key3: value3&#125;</code></p><p>键必须是唯一的，但值可以不必。</p><p>一个简单的字典实例：</p><pre class=" language-python"><code class="language-python">dictEx <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name': 'runoob', 'likes': 123, 'url': 'www.runoob.com'&amp;#125;</span></code></pre><blockquote><p>如果声明字典时有相同的键，则会只存在最后面的那个键值</p><p><code>dictEx = &#123;&#39;python&#39;: &#39;one&#39;, &#39;php&#39;: &#39;two&#39;, &#39;python&#39;: &#39;three&#39;&#125;</code></p><p>实际<code>dictEx</code>为<code>&#123;&#39;python&#39;: &#39;three&#39;, &#39;php&#39;: &#39;two&#39;&#125;</code></p></blockquote><span id="more"></span><h2 id="二、字典操作"><a href="#二、字典操作" class="headerlink" title="二、字典操作"></a>二、字典操作</h2><h3 id="1、基本操作"><a href="#1、基本操作" class="headerlink" title="1、基本操作"></a>1、基本操作</h3><h4 id="1-增加-修改字典"><a href="#1-增加-修改字典" class="headerlink" title="1.增加/修改字典"></a>1.增加/修改字典</h4><pre class=" language-python"><code class="language-python">dictEx <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'a':1, 'b':2&amp;#125;</span><span class="token comment" spellcheck="true"># 增</span>dictEx<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>dictEx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 &amp;#123;'a': 1, 'b': 2, 'c': 3&amp;#125;</span>dictEx<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'t':1, 'd': "66"&amp;#125;)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dictEx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 &amp;#123;'a': 1, 'b': 2, 'c': 3, 't': 1, 'd': '66'&amp;#125;</span></code></pre><h4 id="2-删除字典"><a href="#2-删除字典" class="headerlink" title="2.删除字典"></a>2.删除字典</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 删除字典的键</span><span class="token keyword">del</span> dictEx<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dictEx<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 &amp;#123;'a': 1, 'c': 3, 't': 1, 'd': '66'&amp;#125;</span><span class="token comment" spellcheck="true"># 清空字典</span>dictEx<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除字典</span><span class="token keyword">del</span> dcitEx</code></pre><h4 id="3-获取字典的key"><a href="#3-获取字典的key" class="headerlink" title="3.获取字典的key"></a>3.获取字典的key</h4><pre class=" language-python"><code class="language-python">dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'jen': 'python', 'sarch': 'c'&amp;#125;</span><span class="token keyword">for</span> name <span class="token keyword">in</span> dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出</span><span class="token comment" spellcheck="true"># jen</span><span class="token comment" spellcheck="true"># sarch</span></code></pre><h4 id="4-字典的特性"><a href="#4-字典的特性" class="headerlink" title="4.字典的特性"></a>4.字典的特性</h4><p>1）键必须不可变，可以用数字，字符串和元组充当</p><h2 id="三、注意点"><a href="#三、注意点" class="headerlink" title="三、注意点"></a>三、注意点</h2><h3 id="1、Python-字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。"><a href="#1、Python-字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。" class="headerlink" title="1、Python 字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。"></a>1、Python 字典通过检查键值是否相等和比较哈希值来确定两个键是否相同。</h3><pre class=" language-python"><code class="language-python">some_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>some_dict<span class="token punctuation">[</span><span class="token number">5.5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Ruby"</span>some_dict<span class="token punctuation">[</span><span class="token number">5.0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"JavaScript"</span>some_dict<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>some_dict<span class="token punctuation">[</span><span class="token number">5.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 Ruby</span><span class="token keyword">print</span><span class="token punctuation">(</span>some_dict<span class="token punctuation">[</span><span class="token number">5.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>some_dict<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span> <span class="token operator">==</span> hash<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出 True</span></code></pre><h3 id="2、判断字典某个key是否存在"><a href="#2、判断字典某个key是否存在" class="headerlink" title="2、判断字典某个key是否存在"></a>2、判断字典某个key是否存在</h3><pre class=" language-python"><code class="language-python">dict_ex <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name': 'wei', 'age': 18&amp;#125;</span><span class="token keyword">if</span> <span class="token string">'name'</span> <span class="token keyword">in</span> dict_ex<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> true<span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> false</code></pre>]]></content>
    
    
    <summary type="html">数据类型总览--字典详情</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python--数据类型总览--字符串详情</title>
    <link href="http://example.com/2021/04/29/python/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AF%A6%E7%BB%86/"/>
    <id>http://example.com/2021/04/29/python/04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AF%A6%E7%BB%86/</id>
    <published>2021-04-29T02:51:22.000Z</published>
    <updated>2021-04-29T08:48:39.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、字符串运算符"><a href="#1、字符串运算符" class="headerlink" title="1、字符串运算符"></a>1、字符串运算符</h3><p><code>a = Hello</code> <code>b = Python</code></p><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>字符串连接</td><td>a + b <br />输出：HelloPython</td></tr><tr><td>*</td><td>重复输出字符</td><td>a*2 <br />输出：HelloHello</td></tr><tr><td>[]</td><td>通过索引输出字符串</td><td>a[1]<br />输出：e</td></tr><tr><td>[:]</td><td>截取字符串中的一部分，遵循 <strong>左闭右开</strong> 原则，str[0:2]是不包含第3个字符的</td><td>a[1:4]<br />输出：ell</td></tr><tr><td>in</td><td>成员运算符–如果字符串中包含给定字符就返回True</td><td>‘H’ in a<br />输出：True</td></tr><tr><td>not in</td><td>成员运算符–如果字符串中不包含给定的字符返货True</td><td>‘M’ not in a<br />输出：True</td></tr><tr><td>r/R</td><td>原始字符串</td><td>print(r’\a’) <br />输出：\a</td></tr><tr><td>%</td><td>格式字符串</td><td>配合格式化符号使用</td></tr></tbody></table><span id="more"></span><h3 id="2、字符串格式化"><a href="#2、字符串格式化" class="headerlink" title="2、字符串格式化"></a>2、字符串格式化</h3><p><code>print(&quot;i am %s&quot; % &quot;jack&quot;)</code></p><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>%c</td><td>格式化字符及其ASCII码</td></tr><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%d</td><td>格式化整数</td></tr><tr><td>%u</td><td>格式化无符号整数</td></tr><tr><td>%o</td><td>格式化无符号八进制数</td></tr><tr><td>%x</td><td>格式化无符号十六进制数</td></tr><tr><td>%X</td><td>格式化无符号十六进制数（大写）</td></tr><tr><td>%f</td><td>格式化浮点数字，可指定小数点后的精度[%.2f]</td></tr><tr><td>%e</td><td>用科学技术法格式化浮点数</td></tr><tr><td>%E</td><td>作用同%e</td></tr><tr><td>%g</td><td>%f和%e的简写</td></tr><tr><td>%G</td><td>%f和%E的简写</td></tr><tr><td>%p</td><td>用十六进制数格式化变量的地址</td></tr></tbody></table><h3 id="3、字符串内建函数"><a href="#3、字符串内建函数" class="headerlink" title="3、字符串内建函数"></a>3、字符串内建函数</h3><h4 id="1-capitalize"><a href="#1-capitalize" class="headerlink" title="1.* capitalize()"></a>1.* <code>capitalize()</code></h4><p>将字符串的第一个字符转换为大写</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Hello</span></code></pre><h4 id="2-center-width-fillchar"><a href="#2-center-width-fillchar" class="headerlink" title="2. center(width, fillchar)"></a>2. <code>center(width, fillchar)</code></h4><p>返回一个指定的宽度width居中的字符串，fillchar为填充的字符，默认为空格</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># --hello---</span></code></pre><h4 id="3-count-str-beg-0-end-len-string"><a href="#3-count-str-beg-0-end-len-string" class="headerlink" title="3.* count(str, beg=0, end=len(string))"></a>3.* <code>count(str, beg=0, end=len(string))</code></h4><p>返回str在string里面出现的次数，如果beg[闭区间]或者end指定则返回指定范围内str出现的次数</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1</span></code></pre><h4 id="4-bytes-decode-encoding-quot-utf-8-errors-quot-strict-quot"><a href="#4-bytes-decode-encoding-quot-utf-8-errors-quot-strict-quot" class="headerlink" title="4. bytes.decode(encoding=&quot;utf-8, errors=&quot;strict&quot;)"></a>4. <code>bytes.decode(encoding=&quot;utf-8, errors=&quot;strict&quot;)</code></h4><p>Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span>strExBytes <span class="token operator">=</span> strEx<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>strExBytes<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># b'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strExBytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hello</span></code></pre><h4 id="5-encode-encoding-39-UTF-8-39-errors-39-strict-39"><a href="#5-encode-encoding-39-UTF-8-39-errors-39-strict-39" class="headerlink" title="5. encode(encoding=&#39;UTF-8&#39;, errors=&#39;strict&#39;)"></a>5. <code>encode(encoding=&#39;UTF-8&#39;, errors=&#39;strict&#39;)</code></h4><p>以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</p><h4 id="6-endswith-suffix-beg-0-end-len-string"><a href="#6-endswith-suffix-beg-0-end-len-string" class="headerlink" title="6. endswith(suffix, beg=0, end=len(string))"></a>6. <code>endswith(suffix, beg=0, end=len(string))</code></h4><p>检查字符串是否以obj结束，如果beg或者end指定则检查指定的范围内是否以obj结束，如果是，返回True，否则返回False</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'llo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre><h4 id="7-expandtabs-tabsize-8"><a href="#7-expandtabs-tabsize-8" class="headerlink" title="7. expandtabs(tabsize=8)"></a>7. <code>expandtabs(tabsize=8)</code></h4><p>把字符串string中的tab符号转为空格，tab符号默认的空格数是8</p><h4 id="8-find-str-beg-0-end-len-string"><a href="#8-find-str-beg-0-end-len-string" class="headerlink" title="8.* find(str, beg=0, end=len(string))"></a>8.* <code>find(str, beg=0, end=len(string))</code></h4><p>检测str是否包含在字符串中，如果指定范围beg和end，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># -1</span></code></pre><h4 id="9-index-str-beg-0-end-len-string"><a href="#9-index-str-beg-0-end-len-string" class="headerlink" title="9. index(str, beg=0, end=len(string))"></a>9. <code>index(str, beg=0, end=len(string))</code></h4><p>跟find()方法一样，只不过如果str不在字符串中会报一个异常</p><h4 id="10-isalnum"><a href="#10-isalnum" class="headerlink" title="10. isalnum()"></a>10. <code>isalnum()</code></h4><p>如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello123'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span>strEx <span class="token operator">=</span> <span class="token string">'hello 123'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span></code></pre><h4 id="11-isalpha"><a href="#11-isalpha" class="headerlink" title="11. isalpha()"></a>11. <code>isalpha()</code></h4><p>如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello123'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span>strEx <span class="token operator">=</span> <span class="token string">'中文hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre><h4 id="12-isdigit"><a href="#12-isdigit" class="headerlink" title="12. isdigit()"></a>12. <code>isdigit()</code></h4><p>如果字符串只包含数字则返回True，否则返回False</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello123'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span>strEx <span class="token operator">=</span> <span class="token string">'12345'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre><h4 id="13-islower"><a href="#13-islower" class="headerlink" title="13.* islower()"></a>13.* <code>islower()</code></h4><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是小写，则返回True，否则返回False</p><p>如果都是数字，返回的是False</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'123'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span>strEx <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span>strEx <span class="token operator">=</span> <span class="token string">'hello123'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre><h4 id="14-isnumeric"><a href="#14-isnumeric" class="headerlink" title="14.* isnumeric()"></a>14.* <code>isnumeric()</code></h4><p>如果字符串只包含数字字符，则返回True，否则返回False</p><h4 id="15-isspace"><a href="#15-isspace" class="headerlink" title="15. isspace()"></a>15. <code>isspace()</code></h4><p>如果字符串中只包含空白，则返回True，否则返回False</p><blockquote><p>如果是空字符串，返回的False</p></blockquote><h4 id="16-istitle"><a href="#16-istitle" class="headerlink" title="16. istitle()"></a>16. <code>istitle()</code></h4><p>如果字符串是标题化的(见 title())则返回 True，否则返回 False</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#eg1:</span>strEx <span class="token operator">=</span> <span class="token string">'hello'</span>strEx <span class="token operator">=</span> strEx<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 标题化</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Hello</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>istitle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true">#eg2</span>strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>istitle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre><h4 id="17-isupper"><a href="#17-isupper" class="headerlink" title="17. isupper()"></a>17. <code>isupper()</code></h4><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些（区分大小写）字符都是大写，则返回True，否则返回False</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span>strEx <span class="token operator">=</span> <span class="token string">'HELLO'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre><h4 id="18-join-seq"><a href="#18-join-seq" class="headerlink" title="18. join(seq)"></a>18. <code>join(seq)</code></h4><p>以指定字符串作为分隔符，将seq中所有的元素（的字符串表示）合并为一个新的字符串</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">','</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a,b,c</span></code></pre><h4 id="19-len-string"><a href="#19-len-string" class="headerlink" title="19.* len(string)"></a>19.* <code>len(string)</code></h4><p>返回字符串长度</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3</span></code></pre><h4 id="20-ljust-width-fillchar"><a href="#20-ljust-width-fillchar" class="headerlink" title="20. ljust(width[, fillchar])"></a>20. <code>ljust(width[, fillchar])</code></h4><p>返回一个原字符串左对齐，并使用fillchar填充至长度width的新字符串，fillchar默认为空格</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># abc-------</span></code></pre><h4 id="21-lower"><a href="#21-lower" class="headerlink" title="21.* lower()"></a>21.* <code>lower()</code></h4><p>转换字符串中所有的大写字符为小写</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'abCdEF'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># abcdef</span></code></pre><h4 id="22-lstrip"><a href="#22-lstrip" class="headerlink" title="22.* lstrip()"></a>22.* <code>lstrip()</code></h4><p>截掉字符串左边的空格或指定字符</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">' abc'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># abc</span>strEx <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bc</span></code></pre><h4 id="23-maketrans-translate"><a href="#23-maketrans-translate" class="headerlink" title="23. maketrans() translate()"></a>23. <code>maketrans()</code> <code>translate()</code></h4><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'abc'</span>maket <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'ab'</span><span class="token punctuation">,</span> <span class="token string">'12'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 生成对应关系</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>maket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 12c</span></code></pre><h4 id="24-max-str"><a href="#24-max-str" class="headerlink" title="24. max(str)"></a>24. <code>max(str)</code></h4><p>返回字符串中str最大的字母</p><h4 id="25-min-str"><a href="#25-min-str" class="headerlink" title="25. min(str)"></a>25. <code>min(str)</code></h4><p>返回字符串中str最小的字母</p><h4 id="26-replace-old-new-max"><a href="#26-replace-old-new-max" class="headerlink" title="26. replace(old, new[, max])"></a>26. <code>replace(old, new[, max])</code></h4><p>把将字符串中的old替换成new，如果max指定，则替换不超过max次</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'13521282025'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>strEx<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 135****2025</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 只替换了前三个</span><span class="token comment" spellcheck="true"># 135*1*8*025</span></code></pre><h4 id="27-rfind-str-beg-0-end-len-string"><a href="#27-rfind-str-beg-0-end-len-string" class="headerlink" title="27. rfind(str, beg=0, end=len(string))"></a>27. <code>rfind(str, beg=0, end=len(string))</code></h4><p>类似于find()函数，不过是从右边开始查找</p><h4 id="28-rindex-str-beg-0-end-len-string"><a href="#28-rindex-str-beg-0-end-len-string" class="headerlink" title="28. rindex(str, beg=0, end=len(string))"></a>28. <code>rindex(str, beg=0, end=len(string))</code></h4><p>类似于index()，不过是从右边开始</p><h4 id="29-rjust-width-fillchar"><a href="#29-rjust-width-fillchar" class="headerlink" title="29. rjust(width, [,fillchar])"></a>29. <code>rjust(width, [,fillchar])</code></h4><p>用法同ljust()，   返回一个原字符串右对齐，并使用fillchar(默认空格)填充至长度width的新字符串</p><h4 id="30-rstript"><a href="#30-rstript" class="headerlink" title="30.* rstript()"></a>30.* <code>rstript()</code></h4><p>用法同lstript()，  删除字符串末尾的空格</p><h4 id="31-split-str-39-39-num-string-count-str"><a href="#31-split-str-39-39-num-string-count-str" class="headerlink" title="31.* split(str=&#39;&#39;, num=string.count(str))"></a>31.* <code>split(str=&#39;&#39;, num=string.count(str))</code></h4><p>以str为分隔符截取字符串，如果num有指定值，则仅截取num+1个子字符串</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'a,b,c,d,e'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['a', 'b', 'c', 'd', 'e']</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['a', 'b', 'c', 'd,e']</span></code></pre><h4 id="32-splitlines-keepends"><a href="#32-splitlines-keepends" class="headerlink" title="32. splitlines(keepends)"></a>32. <code>splitlines(keepends)</code></h4><p>按照行（’\r’, ‘\r\n’, ‘\n’）分隔，返回一个包含各行作为元素的列表，如果参数keepends为False，不包含换行符，如果为True，则保留换行符</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello\nmy\n'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['hello', 'my']</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['hello\n', 'my\n']</span></code></pre><h4 id="33-startswith-substr-beg-0-end-len-string"><a href="#33-startswith-substr-beg-0-end-len-string" class="headerlink" title="33.  startswith(substr, beg=0, end=len(string))"></a>33.  <code>startswith(substr, beg=0, end=len(string))</code></h4><p>检查字符串是否是以指定子字符串substr开头，是则返回True，否则返回False，如果beg和end指定值，则在指定范围内检查</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'he'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre><h4 id="34-strip-chars"><a href="#34-strip-chars" class="headerlink" title="34.* strip(chars)"></a>34.* <code>strip(chars)</code></h4><p>在字符串上执行lstrip()和rstript()</p><h4 id="35-swapcase"><a href="#35-swapcase" class="headerlink" title="35. swapcase()"></a>35. <code>swapcase()</code></h4><p>将字符串中大写转换为小写，小写转换为大写</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hELLO</span></code></pre><h4 id="36-upper"><a href="#36-upper" class="headerlink" title="36. upper()"></a>36. <code>upper()</code></h4><p>转换字符串中的小写字母为大写</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># HELLO</span></code></pre><h4 id="37-zfill-width"><a href="#37-zfill-width" class="headerlink" title="37. zfill(width)"></a>37. <code>zfill(width)</code></h4><p>返回长度为width的字符串，原字符串右对齐，前面填充0</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 00000hello</span></code></pre><h4 id="38-isdecimal"><a href="#38-isdecimal" class="headerlink" title="38. isdecimal()"></a>38. <code>isdecimal()</code></h4><p>检查字符串是否只包含十进制字符，如果是返回True，否则返回False</p><pre class=" language-python"><code class="language-python">strEx <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span>strEx <span class="token operator">=</span> <span class="token string">'100'</span><span class="token keyword">print</span><span class="token punctuation">(</span>strEx<span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span></code></pre>]]></content>
    
    
    <summary type="html">数据类型总览--字符串详情</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python--前言</title>
    <link href="http://example.com/2021/04/24/python/python/"/>
    <id>http://example.com/2021/04/24/python/python/</id>
    <published>2021-04-24T08:30:52.000Z</published>
    <updated>2021-04-29T08:46:18.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先了解python"><a href="#先了解python" class="headerlink" title="先了解python"></a>先了解python</h2><h3 id="1、python是一种解释性语言"><a href="#1、python是一种解释性语言" class="headerlink" title="1、python是一种解释性语言"></a>1、python是一种解释性语言</h3><p>python也是需要编译的，只不过Python不像java那样需要去强编译「手动编译」，Python在执行时是自动完成编译。</p><p>编译的结果是保存于在位于内存中的<strong>PyCodeObject</strong>中，然后通过解释器将PyCodeObject写回到<strong>pyc</strong>文件中。</p><p>当Python程序第二次运行时，首先会在硬盘中找pyc文件，如果找到直接载入，没有就执行正常过程。</p><blockquote><p>编译型语言C语言，就需要一个编译的过程，把程序转成机器语言。</p></blockquote><h3 id="2、pyc文件生成的位置"><a href="#2、pyc文件生成的位置" class="headerlink" title="2、pyc文件生成的位置"></a>2、pyc文件生成的位置</h3><p>会在生成在执行文件的同级，生成在默认的目 <code>__pycache__</code>下面，如果<code>import</code>的文件的名字为<code>example</code>，生成的名字格式大概为<code>example-cpython-39.pyc</code>。</p><h3 id="3、pyc文件有效性"><a href="#3、pyc文件有效性" class="headerlink" title="3、pyc文件有效性"></a>3、pyc文件有效性</h3><p>python每次载入pyc文件之前会检查下py文件和pyc文件的最后修改日期，如果日期不一致会重新生成一份pyc文件</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h3><p>1、python有许多完善的基础代码库，开发时实用很方便</p><h3 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h3><p>1、代码不能加密，因为Python是解释性语言，源代码是以明文形式存放，如果项目有对代码加密的需求，不要用Python来实现</p><h4 id=""><a href="#" class="headerlink" title=""></a><!--深入的遇到再补充--></h4>]]></content>
    
    
    <summary type="html">了解Python</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
</feed>
