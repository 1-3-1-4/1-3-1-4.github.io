<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寥寥几笔</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-29T03:49:56.605Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>YiZheng-Wei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python--数据类型总览</title>
    <link href="http://example.com/2021/04/29/02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%80%BB%E8%A7%88/"/>
    <id>http://example.com/2021/04/29/02-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%80%BB%E8%A7%88/</id>
    <published>2021-04-29T02:51:22.000Z</published>
    <updated>2021-04-29T03:49:56.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整型-int"><a href="#整型-int" class="headerlink" title="整型(int)"></a>整型(int)</h2><pre class=" language-python"><code class="language-python">intEx <span class="token operator">=</span> <span class="token number">1024</span></code></pre><h2 id="浮点型-float"><a href="#浮点型-float" class="headerlink" title="浮点型(float)"></a>浮点型(float)</h2><p><code>floatEx = 2.345</code></p><span id="more"></span><h2 id="字符型-string"><a href="#字符型-string" class="headerlink" title="字符型(string)"></a>字符型(string)</h2><h3 id="1、格式"><a href="#1、格式" class="headerlink" title="1、格式"></a>1、格式</h3><p>1、使用单引号标识字符串</p><p><code>stringEx = &#39;my code&#39;</code></p><p>2、使用双引号标识字符串</p><p><code>stringEx = &quot;my code&quot;</code></p><blockquote><p>在双引号中可以使用单引号<code>stringEx = &quot;&#39;my&#39;,&#39;code&#39;&quot;</code></p></blockquote><p>3、使用三单引号或三双引号来表示多行的字符串，可以在三引号中使用单引号和双引号</p><pre class=" language-python"><code class="language-python">stringEx <span class="token operator">=</span> <span class="token triple-quoted-string string">'''my codeoh, this is 'cat'yes, l like "it"'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>stringEx<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""my codeoh, this is 'cat'yes, l like "it""""</span></code></pre><blockquote><p>同时三单引号和三双引号在Python也表示多行注释</p></blockquote><h3 id="2、一些字符串的操作"><a href="#2、一些字符串的操作" class="headerlink" title="2、一些字符串的操作"></a>2、一些字符串的操作</h3><p>1、获取字符串<code>abcdefgh</code>中的<code>bc</code></p><pre class=" language-python"><code class="language-python">stringEx <span class="token operator">=</span> <span class="token string">'abcdefgh'</span><span class="token keyword">print</span><span class="token punctuation">(</span>stringEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bc</span></code></pre><p>2、循环输出字符串的每个字符</p><pre class=" language-python"><code class="language-python">stringEx <span class="token operator">=</span> <span class="token string">'abcdefgh'</span><span class="token keyword">for</span> s <span class="token keyword">in</span> stringEx<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><h2 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型(bool)"></a>布尔型(bool)</h2><p><code>boolEx = True</code></p><p><code>boolEx = False</code></p><h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h2><h3 id="1、格式-1"><a href="#1、格式-1" class="headerlink" title="1、格式"></a>1、格式</h3><p><code>变量名 = [值1, 值2, 值3]</code></p><h3 id="2、初始化"><a href="#2、初始化" class="headerlink" title="2、初始化"></a>2、初始化</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 初始化一个空列表</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化一个都为整型的列表</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化连续的数字 [5, 6, 7, 8, 9]</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 初始化n个相同值的列表 [1, 1, 1, 1, 1]</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#第一种</span>listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment" spellcheck="true">#第二种</span></code></pre><h3 id="3、列表的操作"><a href="#3、列表的操作" class="headerlink" title="3、列表的操作"></a>3、列表的操作</h3><p><code>listEx = [1, 2, 3]</code></p><h4 id="1、列表中增加值"><a href="#1、列表中增加值" class="headerlink" title="1、列表中增加值"></a>1、列表中增加值</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#插入指定值的后面,如果列表中有多个指定的值，则会插入在一个指定值的后面</span>listEx<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'bob'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#追加在列表的最后面 [1, 2, 3, 'bob']</span>listEx<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#追加多个值 [1, 2, 3, 'joe', 'hode']</span>listEx<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'joe'</span><span class="token punctuation">,</span> <span class="token string">'hode'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>一些意外的写法</p><p><code>listEx.append([&#39;bob&#39;, &#39;joe&#39;])</code>得到的是<code>[1, 2, 3, [&#39;bob&#39;, &#39;joe&#39;]]</code></p><p><code>listEx.extend(&#39;bob&#39;)</code>得到的是<code>[1, 2, 3, &#39;b&#39;, &#39;o&#39;, &#39;b&#39;]</code></p></blockquote><h4 id="2、列表中删除值"><a href="#2、列表中删除值" class="headerlink" title="2、列表中删除值"></a>2、列表中删除值</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#删除指定的值</span>listEx<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#删除的列表中第一个值为2的</span><span class="token comment" spellcheck="true">#删除从1到2位置的值</span><span class="token keyword">del</span> listEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h2><h3 id="1、格式-2"><a href="#1、格式-2" class="headerlink" title="1、格式"></a>1、格式</h3><p><code>变量 = (值1, 值2, 值3)</code></p><blockquote><p>元组与列表类似，不同之处在于元组的元素不能修改</p></blockquote><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><pre class=" language-python"><code class="language-python">tupleEx <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span>  <span class="token punctuation">)</span>tinytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 输出完整元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 输出元组的第一个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输出从第二个元素开始到第三个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 输出从第三个元素开始的所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinytuple <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出两次元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tupleEx <span class="token operator">+</span> tinytuple<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接元组</span></code></pre><blockquote><p>string、list 和 tuple 都属于 sequence（序列）。</p><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul></blockquote><p><strong>特殊的使用</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。listEx = [1, 2, 3]letter = ([1, 2, 3], 'a')letter[0][2] = 5print(letter)</span></code></pre><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h2><h3 id="1、格式-3"><a href="#1、格式-3" class="headerlink" title="1、格式"></a>1、格式</h3><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合</p><blockquote><p><strong>注意：</strong>创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p></blockquote><h3 id="2、使用-1"><a href="#2、使用-1" class="headerlink" title="2、使用"></a>2、使用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在if中的使用sites = &amp;#123;'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu', 'Taobao'&amp;#125;print(sites)# &amp;#123;'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'&amp;#125;</span></code></pre><blockquote><p><strong>重复的元素会被自动过滤掉，而且输出的集合中的顺序是随机的</strong></p></blockquote><h3 id="3、集合的运算"><a href="#3、集合的运算" class="headerlink" title="3、集合的运算"></a>3、集合的运算</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># set可以进行集合运算a = set('abracadabra')b = set('alacazam')print(a)print(a - b)     # a 和 b 的差集  在a中有的且在b中没有的# &amp;#123;'d', 'b', 'r'&amp;#125;print(b - a)         # b 和 a 的差集  在b中有的且在a中没有的# &amp;#123;'l', 'm', 'z'&amp;#125;print(a | b)     # a 和 b 的并集# &amp;#123;'d', 'z', 'b', 'a', 'r', 'm', 'c', 'l'&amp;#125;print(a &amp; b)     # a 和 b 的交集#&amp;#123;'a', 'c'&amp;#125;print(a ^ b)         # a 和 b 中不同时存在的元素# &amp;#123;'d', 'z', 'b', 'l', 'r', 'm'&amp;#125;</span></code></pre><h2 id="字典-dictionary"><a href="#字典-dictionary" class="headerlink" title="字典(dictionary)"></a>字典(dictionary)</h2><h3 id="1、格式-4"><a href="#1、格式-4" class="headerlink" title="1、格式"></a>1、格式</h3><p>列表是有序的对象集合，字典是无序的对象集合。</p><blockquote><p>列表和字典的区别：字典中的元素是通过键来存取，而不是通过偏移存取</p></blockquote><p>字典是一种映射类型，字典用<code>&#123;&#125;</code>标识，它是一个无序的<code>键(key): 值(value)</code>的集合</p><p>在同一个字典中，键(key)必须是惟一的</p><pre class=" language-python"><code class="language-python">dictEx <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;  'a': 1,  'b': 2ExdictEx[1] = 'abc'print(dictEx)# &amp;#123;'a': 1, 'b': 2, 1: 'abc'&amp;#125;print(list(dictEx.keys()) # 输出所有的键# ['a', 'b', 1]print(list(dictEx.values()) # 输出所有的值# [1, 2, 'abc']</span></code></pre><h3 id="2、一些构建字典的写法"><a href="#2、一些构建字典的写法" class="headerlink" title="2、一些构建字典的写法"></a>2、一些构建字典的写法</h3><pre class=" language-python"><code class="language-python">listEx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'golang'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">(</span>listEx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &amp;#123;'python': 1, 'php': 2, 'golang': 3&amp;#125;dictEx = &amp;#123;x: x**2 for x in (2, 4, 6)&amp;#125;print(dictEx)# &amp;#123;2: 4, 4: 16, 6: 36&amp;#125;dictEx = dict(python=1, php=2, golang=3)print(dictEx)# &amp;#123;'python': 1, 'php': 2, 'golang': 3&amp;#125;</span></code></pre><blockquote><p><code>x**2</code>中<code>**</code>表示幂，<code>2**3</code>表示2的3次方</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;整型-int&quot;&gt;&lt;a href=&quot;#整型-int&quot; class=&quot;headerlink&quot; title=&quot;整型(int)&quot;&gt;&lt;/a&gt;整型(int)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;intEx = 1024
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;浮点型-float&quot;&gt;&lt;a href=&quot;#浮点型-float&quot; class=&quot;headerlink&quot; title=&quot;浮点型(float)&quot;&gt;&lt;/a&gt;浮点型(float)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;floatEx = 2.345&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-1</title>
    <link href="http://example.com/2021/04/24/01-python/"/>
    <id>http://example.com/2021/04/24/01-python/</id>
    <published>2021-04-24T08:30:52.000Z</published>
    <updated>2021-04-29T04:06:38.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先了解python"><a href="#先了解python" class="headerlink" title="先了解python"></a>先了解python</h2><h3 id="1、python是一种解释性语言"><a href="#1、python是一种解释性语言" class="headerlink" title="1、python是一种解释性语言"></a>1、python是一种解释性语言</h3><p>python也是需要编译的，只不过Python不像java那样需要去强编译「手动编译」，Python在执行时是自动完成编译。</p><p>编译的结果是保存于在位于内存中的<strong>PyCodeObject</strong>中，然后通过解释器将PyCodeObject写回到<strong>pyc</strong>文件中。</p><p>当Python程序第二次运行时，首先会在硬盘中找pyc文件，如果找到直接载入，没有就执行正常过程。</p><blockquote><p>编译型语言C语言，就需要一个编译的过程，把程序转成机器语言。</p></blockquote><span id="more"></span><h3 id="2、pyc文件生成的位置"><a href="#2、pyc文件生成的位置" class="headerlink" title="2、pyc文件生成的位置"></a>2、pyc文件生成的位置</h3><p>会在生成在执行文件的同级，生成在默认的目 <code>__pycache__</code>下面，如果<code>import</code>的文件的名字为<code>example</code>，生成的名字格式大概为<code>example-cpython-39.pyc</code>。</p><h3 id="3、pyc文件有效性"><a href="#3、pyc文件有效性" class="headerlink" title="3、pyc文件有效性"></a>3、pyc文件有效性</h3><p>python每次载入pyc文件之前会检查下py文件和pyc文件的最后修改日期，如果日期不一致会重新生成一份pyc文件</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h3><p>1、python有许多完善的基础代码库，开发时实用很方便</p><h3 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h3><p>1、代码不能加密，因为Python是解释性语言，源代码是以明文形式存放，如果项目有对代码加密的需求，不要用Python来实现</p><h4 id=""><a href="#" class="headerlink" title=""></a><!--深入的遇到再补充--></h4>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;先了解python&quot;&gt;&lt;a href=&quot;#先了解python&quot; class=&quot;headerlink&quot; title=&quot;先了解python&quot;&gt;&lt;/a&gt;先了解python&lt;/h2&gt;&lt;h3 id=&quot;1、python是一种解释性语言&quot;&gt;&lt;a href=&quot;#1、python是一种解释性语言&quot; class=&quot;headerlink&quot; title=&quot;1、python是一种解释性语言&quot;&gt;&lt;/a&gt;1、python是一种解释性语言&lt;/h3&gt;&lt;p&gt;python也是需要编译的，只不过Python不像java那样需要去强编译「手动编译」，Python在执行时是自动完成编译。&lt;/p&gt;
&lt;p&gt;编译的结果是保存于在位于内存中的&lt;strong&gt;PyCodeObject&lt;/strong&gt;中，然后通过解释器将PyCodeObject写回到&lt;strong&gt;pyc&lt;/strong&gt;文件中。&lt;/p&gt;
&lt;p&gt;当Python程序第二次运行时，首先会在硬盘中找pyc文件，如果找到直接载入，没有就执行正常过程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编译型语言C语言，就需要一个编译的过程，把程序转成机器语言。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
</feed>
